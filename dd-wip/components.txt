Thin client
Fat server
Two layer

Struttura ad eventi per la comunicazione tra i componenti lato server

Components
- Un componente per gestire la distribuzione dei taxi per mantenere la copertura e comunicare coi tassisti
	- Sappiamo già che è un thread/processo a parte
	- Gira sul server
	- Legge il database di zone e il database di taxi
	- Comunicazione sincrona: vincoli di tempo
	- Moduli
		- Un modulo che fa query al DBMS -> comunica col database tassisti e con il modulo analisi
		- Un modulo che analizza i risultati delle query per trovare la copertura -> comunica col modulo comunicazione
		- Un modulo che manda messaggi ai tassisti -> comunica con la classe tassista che metterà il messaggio nel database tassisti da cui poi lo recupererà
		-
	-
- Un componente per raccogliere le reservation e le request for service
	- Usa il database di request
	- Gira sul server
	- Comunicazione sincrona: Dice con limiti di tempo al database manager di scrivere
	- Moduli
		- Un modulo ricevitore che accoglie i messaggi dallo smistatore -> comunica con l'analisi e il server
		- Un modulo di controllo integrità e analisi delle richieste -> comunica con il comunicatore e con il gestore database
		- Un modulo per comunicare con il database -> connesso solo all'altro modulo di analisi
	-
- Un componente per leggere il database di request e reservation e allocarle ai tassisti
	- Legge ciclicamente l'elenco di richieste e alloca quelle per cui è giunta l'ora
	- Dice anche ai passeggeri se non si può fare
	- Usa il database di request e il database di taxi
	- Gira sul server
	- Comunicazione sincrona: vincoli di tempo nella comunicazione e nell'esecuzione delle query
	- Moduli
		- Un modulo che comunica con il database di request e controlla ciclicamente se ce ne sono da attivare -> thread a parte
		- Un modulo che, data una richiesta attivata, sceglie il tassista da allocarle leggendo il database di taxi e quindi la coda della zona corrispondente
		- Un modulo che comunica con il componente di comunicazione per l'inoltro della notifica al tassista
		-
	-
- Un componente che gestisce le code di taxi nelle zone
	- Whatever
	- Moduli
		- Modulo che inserisce un tassista in una coda quando arriva il messaggio di pronto
		-
	-
- Un componente per gestire il sign up
	- Usa il database di passeggeri e taxi
	- Gira sul server
	- Comunicazione asincrona: non ci sono vincoli stringenti di tempo per registrare un nuovo utente
	- Moduli
		- Un componente che si interfaccia con lo smistatore di messaggi
		- Un componente che valuti la correttezza dei dati inseriti e nel caso accetta o rifiuta, leggendo anche nel database
		- Un componente che scrive nel giusto database di utenti
		-
	-
- Un componente per gestire il log in
	- Usa il database di passeggeri e taxi
	- Gira sul server
	- Comunicazione asincrona: si spera che ci metta poco ma non è urgente come altre cose
		- Un componente che si interfaccia con lo smistatore di messaggi
		- Un componente che valuti la correttezza dei dati inseriti e nel caso accetta o rifiuta, leggendo nel database
		- Un componente che legge nel giusto database di utenti
		-
	-
- Un componente che smista i messaggi che arrivano dagli utenti e glieli manda quando serve
	- Gira sul server
	- Comunica con gli altri componenti lato server
	- Moduli
		- Un modulo ricettore
		- Un modulo di analisi del messaggio
		- Un modulo di inoltro agli altri componenti del server dei messaggi ricevuti
		- Un modulo che aggiorna il database di taxi con le posizioni
		- Un modulo che riceve messaggi dagli altri componenti server
		- Un modulo che manda i messaggi al client giusto, come mail o come messaggi suoi
		-
	-
- Un componente interfaccia grafica per l'app
- Un componente per l'app che legga il gps
- Un componente comunicatore per l'app, che manda e riceve i messaggi
	- Questi tre girano sui device di ogni utente
	- Thin client

- Un database di passeggeri
- Un database di taxi e tassiti
- Un database di zone cittadine
- Un database di request (sia real time che reservation)
	- Ogni richiesta ha una data e ora in cui deve essere eseguita; una richiesta real time ha l'ora in cui viene fatta e una prenotazione quella per cui è stata richiesta
	-
-
